# This makes it easyer to use colors in bash-output

# Cli Colors
export CLICOLOR=1

# use yellow for dir‚Äôs
export LSCOLORS=dxfxcxdxbxegedabagacad

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

setLEDColor() {
	re="ticket/.*"
	if ! [[ "$BRANCHNAME" =~ $re ]]; then
		case $BRANCHNAME in
			perforce) blink1 1 danger;;
			master) blink1 1 danger;;
			dev) blink1 1 info;;
		esac
	else
		blink1 1 off
	fi;

	if [ "$BRANCH_CLEAN" -eq "1" ]; then
		blink1 2 success
	else
		blink1 2 warning
		if [ "$BRANCHNAME" = 'dev' ]; then
			blink1 2 danger
		fi;
	fi;

	if [ "$STASH_EMPTY" -eq "0" ]; then
		blink1 3 pink
	else
		blink1 3 off
	fi;
}

prompt_git() {
	# Get the short symbolic ref.
	# If HEAD isn‚Äôt a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.
	local BRANCHNAME="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	local s='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		BRANCH_CLEAN=1
		STASH_EMPTY=1

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
				BRANCH_CLEAN=0
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
				BRANCH_CLEAN=0
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
				BRANCH_CLEAN=0
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
				STASH_EMPTY=0
			fi;

		fi;

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}ÓÇ† ${BRANCHNAME}${purple}${bold}${s}";

		if ! [ -x "$(command -v blink1)" ]; then
			echo 'blink1 is not installed'
			exit
		fi;

		setLEDColor;

	else
		if ! [ -x "$(command -v blink1)" ]; then
			echo 'blink1 is not installed'
			exit
		fi;

		# blink1 1 off
		# blink1 2 off
		# blink1 3 off
		return;
	fi;
}


# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${cyan}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="$(tput setaf 244)";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
#PS1+="\[${bold}\]\n"; # newline
PS1+="\n"; # newline
PS1+="\[${userStyle}\]\u${reset}"; # username
PS1+="\[$(tput setaf 236)\] @ ${reset}";
PS1+="\[${hostStyle}\]\h${reset}"; # host

# This is broken since Sierra
# if ifconfig | grep -q utun1; then
#   PS1+="\[${white}\] ÓÇ¢ ${reset}"; # OpenVPN connected
# elif ifconfig | grep -q ppp0; then
#   PS1+="\[${green}\] üè¢ ${reset}"; # PPPoE connected
# fi

PS1+="\[$(tput setaf 236)\] in ";
PS1+="\[${cyan}\]\w"; # working directory
PS1+="\$(prompt_git \"$(tput setaf 236) on ${white}\")"; # Git repository details

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	PS1+="\[$(tput setaf 236)\] through ";
	PS1+="\[${green}\]SSH${reset}"; # host
fi;

PS1+="\n";
PS1+="\[$(tput setaf 236)\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]‚Üí \[${reset}\]";
export PS2;
