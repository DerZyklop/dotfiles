# This makes it easyer to use colors in bash-output

# Cli Colors
export CLICOLOR=1

# use yellow for dir’s
export LSCOLORS=dxfxcxdxbxegedabagacad

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

    # check if the current directory is in .git before running git checks
    if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

      # Ensure the index is up to date.
      git update-index --really-refresh -q &>/dev/null;

      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+';
      fi;

      # Check for unstaged changes.
      if ! $(git diff-files --quiet --ignore-submodules --); then
        s+='!';
      fi;

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?';
      fi;

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$';
      fi;

    fi;

    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
      git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')";

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${branchName}${white}${bold}${s}";
  else
    return;
  fi;
}

# This makes it easyer to use colors in bash-output

if tput setaf 1 &> /dev/null; then
  export bold=$(tput bold);
  export reset=$(tput sgr0);
  # Solarized colors, taken from http://git.io/solarized-colors.
  export black=$(tput setaf 0);
  export blue=$(tput setaf 33);
  export cyan=$(tput setaf 37);
  export green=$(tput setaf 64);
  export orange=$(tput setaf 166);
  export purple=$(tput setaf 125);
  export red=$(tput setaf 124);
  export violet=$(tput setaf 61);
  export white=$(tput setaf 15);
  export yellow=$(tput setaf 136);
else
  export bold='';
  export reset="\e[0m";
  export black="\e[1;30m";
  export blue="\e[1;34m";
  export cyan="\e[1;36m";
  export green="\e[1;32m";
  export orange="\e[1;33m";
  export purple="\e[1;35m";
  export red="\e[1;31m";
  export violet="\e[1;35m";
  export white="\e[1;37m";
  export yellow="\e[1;33m";
fi;


# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${cyan}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="$(tput setaf 244)";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
#PS1+="\[${bold}\]\n"; # newline
PS1+="\n"; # newline
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[$(tput setaf 236)\] @ ";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[$(tput setaf 236)\] in ";
PS1+="\[${cyan}\]\w"; # working directory
PS1+="\$(prompt_git \"$(tput setaf 236) on ${purple}\")"; # Git repository details
PS1+="\n";
PS1+="\[$(tput setaf 236)\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
