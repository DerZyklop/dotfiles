#!/bin/sh

if [[ $# -lt 1 ]]; then
	echo "––––––––––––––––"
  echo "USAGE: getGitPrompt [with/without colors]"
  echo "––––––––––––––––"
fi

BRANCH_CLEAN=1

HAS_UNCOMMITTED_FILES=0
HAS_UNSTAGED_FILES=0
HAS_UNTRACKED_FILES=0
HAS_STASH=0

BRANCHNAME="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
  git rev-parse --short HEAD 2> /dev/null || \
  echo '')";



setLEDColor() {
  if ! [ -x "$(command -v blink1)" ]; then
    echo 'blink1 is not installed'
    exit
  fi;

	re="ticket/.*"
	if ! [[ "$BRANCHNAME" =~ $re ]]; then
		case $BRANCHNAME in
			perforce) blink1 1 danger;;
			master) blink1 1 danger;;
			dev) blink1 1 info;;
		esac
	else
		blink1 1 off
	fi;

	if [ "$BRANCH_CLEAN" -eq "1" ]; then
		blink1 2 success
	else
		blink1 2 warning
		if [ "$BRANCHNAME" = 'dev' ]; then
			blink1 2 danger
		fi;
	fi;

	if [ "$HAS_STASH" -eq "1" ]; then
		blink1 3 pink
	else
		blink1 3 off
	fi;
}

getStatusBox() {
  local FILE_STATUS='';

  [ "$HAS_UNCOMMITTED_FILES" -eq "1" ] && FILE_STATUS+='+';
  [ "$HAS_UNSTAGED_FILES" -eq "1" ] && FILE_STATUS+='!';
  [ "$HAS_UNTRACKED_FILES" -eq "1" ] && FILE_STATUS+='?';

  if [ "${#FILE_STATUS}" -gt 0 ]; then
    FILE_STATUS=${red}$FILE_STATUS${reset};
  fi;

  local STASH_STATUS='';

  [ "$HAS_STASH" -eq "1" ] && STASH_STATUS+='$';

  if [ "${#STASH_STATUS}" -gt 0 ]; then
    STASH_STATUS=${purple}$STASH_STATUS${reset}
  fi;

  if [ "${#FILE_STATUS}" -gt 0 ] || [ "${#STASH_STATUS}" -gt 0 ]; then
		if [ "$1" -eq 0 ]; then
	    echo "[$FILE_STATUS$STASH_STATUS]"
		else
  	  echo "${reset}${white}[${reset}$FILE_STATUS$STASH_STATUS${reset}${white}]${reset}"
		fi
  fi;
  echo '';

}

prompt_git() {
	# Get the short symbolic ref.
	# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
	# Otherwise, just give up.

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				BRANCH_CLEAN=0
        HAS_UNCOMMITTED_FILES=1
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				BRANCH_CLEAN=0
        HAS_UNSTAGED_FILES=1
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        BRANCH_CLEAN=0
				HAS_UNTRACKED_FILES=1
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				HAS_STASH=1
			fi;

		fi;

		if [ "$1" -lt 1 ]; then
			echo "${2} ${BRANCHNAME} $(getStatusBox $1)"
		else
			echo "${2} ${BRANCHNAME}${bold} $(getStatusBox $1)"
		fi

		setLEDColor;

	else
		return;
	fi;
}

gitInfo() {
	if [ "$BRANCHNAME" = 'dev' ]; then
		branchStyle="${white}";
	elif [ "$BRANCHNAME" = 'master' ]; then
		branchStyle="${red}";
	else
		if [ "$BRANCH_CLEAN" -eq "1" ]; then
			branchStyle="${white}";
		else
			branchStyle="${orange}";
		fi;
	fi;

  if [ "${#BRANCHNAME}" -gt 0 ]; then
		if [ "$1" -eq 0 ]; then
	    echo ' on ' # Git repository details
		else
	    echo $(tput setaf 236) 'on' $(prompt_git $1 ${branchStyle}) # Git repository details
		fi
  fi
  echo ''
}

gitInfo $1
